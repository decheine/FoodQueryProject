/**
 * Filename:   FoodData.java
 * Project:    Final Project
 * Authors:    sapan, Daniel Koch, Samuel Locke
 *
 * Semester:   Fall 2018
 * Course:     CS400
 * Lecture:    002
 * 
 * Due Date:   Before 10pm on December 12, 2018
 * Version:    1.0
 * 
 * Credits:    None
 * 
 * Bugs:       None
 */

package application;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

/**
 * This class represents the backend for managing all 
 * the operations associated with FoodItems
 * 
 * @author sapan (sapan@cs.wisc.edu), Daniel Koch, Samuel Locke
 */
public class FoodData implements FoodDataADT<FoodItem> {
    
    // List of all the food items.
    private List<FoodItem> foodItemList;

    // Map of nutrients and their corresponding index
    private HashMap<String, BPTree<Double, FoodItem>> indexes;
    
    // a BPTree with food names as the key to sort foodItems
    private BPTree<String, FoodItem> nameSorted; // TODO: keep this?
    
    // branching factor of each of the BPTrees in indexes
    private static final int BRANCHINGFACTOR = 3;
    
    
    /**
     * Public constructor
     */
    public FoodData() {
        init();
    }
    
    /**
     * Responsible for initializing fields
     */
    private void init() {
        foodItemList = new ArrayList<FoodItem>();
        indexes = new HashMap<String, BPTree<Double, FoodItem>>();
        nameSorted = new BPTree<String, FoodItem>(BRANCHINGFACTOR);
        
        indexes.put("calories", new BPTree<Double, FoodItem>(BRANCHINGFACTOR));
        indexes.put("fat", new BPTree<Double, FoodItem>(BRANCHINGFACTOR));
        indexes.put("carbohydrate", new BPTree<Double, FoodItem>(BRANCHINGFACTOR));
        indexes.put("fiber", new BPTree<Double, FoodItem>(BRANCHINGFACTOR));
        indexes.put("protein", new BPTree<Double, FoodItem>(BRANCHINGFACTOR));
    }
    
    
    /**
     * Loads the data in the .csv file
     * 
     * file format:
     * <id1>,<name>,<nutrient1>,<value1>,<nutrient2>,<value2>,...
     * <id2>,<name>,<nutrient1>,<value1>,<nutrient2>,<value2>,...
     * 
     * Example:
     * 556540ff5d613c9d5f5935a9,Stewarts_PremiumDarkChocolatewithMintCookieCrunch,calories,280,fat,18,carbohydrate,34,fiber,3,protein,3
     * 
     * Note:
     *  1. All the rows are in valid format.
     *  2. All IDs are unique.
     *  3. Names can be duplicate.
     *  4. All columns are strictly alphanumeric (a-zA-Z0-9_).
     *  5. All food items will strictly contain 5 nutrients in the given order:    
     *     calories,fat,carbohydrate,fiber,protein
     *  6. Nutrients are CASE-INSENSITIVE. 
     * 
     * @param filePath path of the food item data file (e.g. folder1/subfolder1/.../foodItems.csv) 
     */
    @Override
    public void loadFoodItems(String filePath) {
        // Read the input stream from "fileName"
        FileInputStream fileString;
        
        try {
            fileString = new FileInputStream(filePath);
        } catch (FileNotFoundException e1) {
            return;
        }
        
        Scanner scan = new Scanner(fileString);

        init();
        
        // Read each line of the file and place the split line array into an the wordList arrayList
        while (scan.hasNextLine()) {
            String[] foodFileArray = scan.nextLine().split(",");

            if (foodFileArray.length == 12) { // check if correct number of args
                try {
                    FoodItem item = new FoodItem(foodFileArray[0], foodFileArray[1]);
                    
                    item.addNutrient(foodFileArray[2].toLowerCase(), Double.parseDouble(foodFileArray[3]));
                    item.addNutrient(foodFileArray[4].toLowerCase(), Double.parseDouble(foodFileArray[5]));
                    item.addNutrient(foodFileArray[6].toLowerCase(), Double.parseDouble(foodFileArray[7]));
                    item.addNutrient(foodFileArray[8].toLowerCase(), Double.parseDouble(foodFileArray[9]));
                    item.addNutrient(foodFileArray[10].toLowerCase(), Double.parseDouble(foodFileArray[11]));
    
                    this.foodItemList.add(item); // add food item to the list
                    this.nameSorted.insert(item.getName().toLowerCase(), item);
                    
                    // add each food to each of the bp tress
                    this.indexes.get(foodFileArray[2].toLowerCase()).insert(Double.parseDouble(foodFileArray[3]), item);
                    this.indexes.get(foodFileArray[4].toLowerCase()).insert(Double.parseDouble(foodFileArray[5]), item);
                    this.indexes.get(foodFileArray[6].toLowerCase()).insert(Double.parseDouble(foodFileArray[7]), item);
                    this.indexes.get(foodFileArray[8].toLowerCase()).insert(Double.parseDouble(foodFileArray[9]), item);
                    this.indexes.get(foodFileArray[10].toLowerCase()).insert(Double.parseDouble(foodFileArray[11]), item);
                } catch (IllegalArgumentException e) {
                    continue;
                }
            }
        }
        // Close the Scanner and InputStream
        scan.close();
        
        try {
            fileString.close();
        } catch (IOException e) {
            return;
        }
    }

    /**
     * Gets all the food items that have name containing the substring.
     * 
     * Example:
     *     All FoodItem
     *         51c38f5d97c3e6d3d972f08a,Similac_FormulaSoyforDiarrheaReadytoFeed,calories,100,fat,0,carbohydrate,0,fiber,0,protein,3
     *         556540ff5d613c9d5f5935a9,Stewarts_PremiumDarkChocolatewithMintCookieCrunch,calories,280,fat,18,carbohydrate,34,fiber,3,protein,3
     *     Substring: soy
     *     Filtered FoodItem
     *         51c38f5d97c3e6d3d972f08a,Similac_FormulaSoyforDiarrheaReadytoFeed,calories,100,fat,0,carbohydrate,0,fiber,0,protein,3
     * 
     * Note:
     *     1. Matching should be CASE-INSENSITIVE.
     *     2. The whole substring should be present in the name of FoodItem object.
     *     3. substring will be strictly alphanumeric (a-zA-Z0-9_)
     * 
     * @param substring substring to be searched
     * @return list of filtered food items; if no food item matched, return empty list
     */
    @Override
    public List<FoodItem> filterByName(String substring) {
        List<FoodItem> matching = new ArrayList<FoodItem>();
        for (FoodItem fooditem : this.foodItemList) {
            if (fooditem.getName().contains(substring)) {
                matching.add(fooditem);
            }
        }
        return matching;
    }

    /**
     * Gets all the food items that fulfill ALL the provided rules
     *
     * Format of a rule:
     *     "<nutrient> <comparator> <value>"
     * 
     * Definition of a rule:
     *     A rule is a string which has three parts separated by a space:
     *         1. <nutrient>: Name of one of the 5 nutrients [CASE-INSENSITIVE]
     *         2. <comparator>: One of the following comparison operators: <=, >=, ==
     *         3. <value>: a double value
     * 
     * Note:
     *     1. Multiple rules can contain the same nutrient.
     *         E.g. ["calories >= 50.0", "calories <= 200.0", "fiber == 2.5"]
     *     2. A FoodItemADT object MUST satisfy ALL the provided rules i
     *        to be returned in the filtered list.
     *
     * @param rules list of rules
     * @return list of filtered food items; if no food item matched, return empty list
     */
    @Override
    public List<FoodItem> filterByNutrients(List<String> rules) {
        List<FoodItem> currSet = this.foodItemList;
        for (String argument : rules) {
            if (valid(argument)) {
                String[] args = argument.split(" ");
                List<FoodItem> tempSet = indexes.get(args[0]).rangeSearch(Double.parseDouble(args[2]), (String) args[1]);
                currSet = intersection(currSet, tempSet);
            } else {
               // Do nothing
            }
        }
        return currSet;
    }

    /**
     * Adds a food item to the loaded data.
     * @param foodItem the food item instance to be added
     */
    @Override
    public void addFoodItem(FoodItem foodItem) {
        this.foodItemList.add(foodItem); // add food item to the list

        this.nameSorted.insert(foodItem.getName().toLowerCase(), foodItem);
        
        // add each food to each of the bp tress
        this.indexes.get("calories").insert(foodItem.getNutrientValue("calories"), foodItem);
        this.indexes.get("fat").insert(foodItem.getNutrientValue("fat"), foodItem);
        this.indexes.get("carbohydrate").insert(foodItem.getNutrientValue("carbohydrate"), foodItem);
        this.indexes.get("fiber").insert(foodItem.getNutrientValue("fiber"), foodItem);
        this.indexes.get("protein").insert(foodItem.getNutrientValue("protein"), foodItem);
    }

    /**
     * Gets the list of all food items.
     * @return list of FoodItem
     */
    @Override
    public List<FoodItem> getAllFoodItems() {
        return foodItemList;
    }

    /**
     * Save the list of food items in ascending order by name
     * 
     * @param filename name of the file where the data needs to be saved 
     */
    @Override
    public void saveFoodItems(String filename) {
        try {
            PrintWriter out = new PrintWriter(new FileWriter(filename));
            for (FoodItem foodItem : this.nameSorted.rangeSearch("", ">=")) {
                String formatCSV = foodItem.getID() + "," + foodItem.getName() + "," + "calories"
                    + "," + foodItem.getNutrientValue("calories") + "," + "fat" + ","
                    + foodItem.getNutrientValue("fat") + "," + "carbohydrate" + ","
                    + foodItem.getNutrientValue("carbohydrate") + "," + "fiber" + ","
                    + foodItem.getNutrientValue("fiber") + "," + "protein" + ","
                    + foodItem.getNutrientValue("protein");
                out.println(formatCSV);
            }
            out.close();
        } catch (FileNotFoundException ex) {
            // Do nothing
        } catch (IOException ex) {
            // Do nothing
        }
    }
    
    /**
     * A private helper method to check if a given input to the filterByNutrients is a valid
     * argument, it just checks formatting of the string. <nutrient> <comparator> <value>
     * 
     * @param argument
     * @return true if a valid argument
     */
    private boolean valid(String argument) {
        String[] theArgs = argument.split(" ");
        if (theArgs.length != 3) { // check if correct number of args
            return false;
        }
        if (!(theArgs[1].equals(">=")) && !(theArgs[1].equals("<=")) && !(theArgs[1].equals("=="))) {
            return false; // check if valid comparator
        }
        if (!(indexes.containsKey(theArgs[0].toLowerCase()))) { // check if a valid nutrient
            return false;
        }
        return true; // return true if all tests passed
    }
    
    /**
     * A private helper method to find the set intersection of two food sets
     * 
     * @param ListA the sets to be intersected
     * @param ListB
     * @return tmp a list containing the intersect
     */
    private List<FoodItem> intersection(List<FoodItem> setA, List<FoodItem> setB) {
        List<FoodItem> tmp = new ArrayList<FoodItem>();
        for (FoodItem x : setA) // check if each element in one set is in the other
            if (setB.contains(x))
                tmp.add(x); // if in both sets, add to final set
        return tmp;
    }
}
