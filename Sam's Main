/**
 * Filename:   Main.java
 * Project:    Final Project
 * Authors:    Samuel Locke, Niru Achanta
 *
 * Semester:   Fall 2018
 * Course:     CS400
 * Lecture:    002
 * 
 * Due Date:   Before 10pm on December 12, 2018
 * Version:    1.0
 * 
 * Credits:    None
 * 
 * Bugs:       None
 */

package application;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.event.ActionEvent; 
import javafx.event.EventHandler;

/**
 * Creates the basic GUI for Food Query and Meal Analysis
 * 
 * @author Samuel Locke, Niru Achanta
 */
public class Main extends Application {
    private Stage window; // the GUI stage
    private Scene scene; // the main GUI scene
    private FoodListView foodListView; // visible list of food items
    private FoodListView mealListView; // visible list of food items added to meal
    private FoodDataADT<FoodItem> foodData; // Contains all added food items
    private Label counterLabel; // Label of how many food items have been added
    private int counter; // Number of food items added
    
    /**
     * Creates the menu for the program, allowing for loading a new file, saving to a file, adding
     * a singular food item, applying filters, and disabling filters.
     * 
     * @return - a VBox containing the menu interface for the program
     */
    public VBox getLeftPane() {
        // left side of the GUI window
        VBox leftPaneOuter = new VBox(20);

        // top of left side, will contain menu buttons
        VBox topContainer = new VBox(5);
        
        // Vbox containing a label, button, and text field related to file input
        VBox fileInputBox = new VBox(5);
        
        
        // Start of loading a new file section
        Label inputFileLabel = new Label("Input Food List File:");
        
        // Button for loading a file
        Button loadList = new Button("Load New Food List");

        // Field for user input for a file to load
        TextField csvFileInput = new TextField();
        csvFileInput.setPromptText("<file name>.csv");
        
        // Event when loadList button is clicked
        EventHandler<ActionEvent> loadEvent = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
                foodData.loadFoodItems(csvFileInput.getText());
                foodListView.newList(foodData.getAllFoodItems());
                counter = foodData.getAllFoodItems().size();
                counterLabel.setText("Number of Items: " + counter);
            } 
        };
        loadList.setOnAction(loadEvent);

        fileInputBox.getChildren().addAll(inputFileLabel, csvFileInput, loadList);
        // End of loading a new file section
        
        
        // Start of menu button section
        
        // button for saving the current food list to a given file
        Button saveList = new Button("Save Food List");
       
        // when saveList is clicked
        EventHandler<ActionEvent> saveEvent = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
                @SuppressWarnings("unused")
                // creates a window to input a file name where the food list will be save to
                SaveFile fileWindow = new SaveFile(window, foodData);     
            } 
        };
        saveList.setOnAction(saveEvent);
        
        // button for adding a new food item
        Button addFoodItem = new Button("Add New Food Item");
        
        // when addFoodItem is clicked
        EventHandler<ActionEvent> addFoodItemEvent = new EventHandler<ActionEvent>() { 
            @Override
            public void handle(ActionEvent e) {
                Button submitButt = new Button("Submit"); // button for submitting new food item
                Button cancelButt = new Button("Cancel"); // button for canceling submission
                
                // new window displaying entry fields for the item's nutrient values
                AddFoodPopUp addFood = new AddFoodPopUp(window, submitButt, cancelButt);
                
                // when submitButt is clicked
                EventHandler<ActionEvent> submitEvent = new EventHandler<ActionEvent>() { 
                    @Override
                    public void handle(ActionEvent e2) {
                        FoodItem item;
                        
                        try {
                            item = addFood.getNewItem();
                            foodData.addFoodItem(item);
                            foodListView.addItem(new FoodItemView(item));
                            counterLabel.setText("Number of Items: " + (++counter));
                        }
                        catch(NumberFormatException e) {
                            // Do nothing
                        }
                    } 
                }; 
                submitButt.setOnAction(submitEvent);
                
                // when cancelButt is clicked
                EventHandler<ActionEvent> cancelEvent = new EventHandler<ActionEvent>() { 
                    @Override
                    public void handle(ActionEvent e3) {
                        addFood.closeWindow();
                    } 
                }; 
                cancelButt.setOnAction(cancelEvent);
            } 
        };
        addFoodItem.setOnAction(addFoodItemEvent);
        
        // button for disabling all currently operating filters on the food list
        Button showAllFoodItems = new Button("Show All Food Items (Reset Filters)");
        
        // when showAllFoodItems is clicked
        EventHandler<ActionEvent> showAllFoodItemsEvent = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
                foodListView.newList(foodData.getAllFoodItems());
            } 
        }; 
        showAllFoodItems.setOnAction(showAllFoodItemsEvent);
        
        // for spacing out items
        Label spacer0 = new Label("");
        spacer0.setFont(Font.font("Arial", FontWeight.NORMAL, 5));
        
        // add items to the menu button vbox
        topContainer.getChildren().addAll(fileInputBox, spacer0, saveList, addFoodItem, showAllFoodItems);
        // End of menu button section
        
        
        // Start of filter section
        
        // bottom portion of the left side
        VBox botContainer = new VBox(5);

        Label queryLabel = new Label("Food Query");
        queryLabel.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        
        // name filter label and text field
        Label filterLabel = new Label("Name Filter: ");
        TextField filterNameField = new TextField();
        filterNameField.setPromptText("Character sequence e.g. abc");
        filterNameField.setPrefWidth(220);
        
        // nutrient filter label and text area, allowing for multiple filters
        Label nutrientFilterLabel = new Label("Nutrient Filter: ");
        TextArea filterNutrientField = new TextArea();
        filterNutrientField.setPromptText("<nutrient> <comparator> <value> "
            + "<nutrient> <comparator> <value>"
            + "       ...");
        filterNutrientField.setPrefWidth(230);
        
        // applies both kinds of filters
        Button applyQueryButt = new Button("Apply Query");
        
        // when applyQueryButt is clicked
        EventHandler<ActionEvent> applyQueryEvent = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
                String name = filterNameField.getText(); // name filter
                String temp = filterNutrientField.getText(); // string of nutrient filters
                String [] arrayOfRules = temp.split("\n"); // array of nutrient filters
                List<String> rules = Arrays.asList(arrayOfRules); // list of nutrient filters
                List<FoodItem> filterList; // list of food items that meet the filter criteria
                
                try {
                    if(name.equals("")) {
                        if(!(rules.get(0).equals(""))) {
                            filterList = foodData.filterByNutrients(rules);
                            foodListView.newList(filterList);
                        }
                        
                        // Else do nothing since both fields are empty
                    }
                    else if(rules.get(0).equals("")) {
                        filterList = foodData.filterByName(name);
                        foodListView.newList(filterList);
                    }
                    else {
                        filterList = intersection(foodData.filterByNutrients(rules), foodData.filterByName(name));
                        foodListView.newList(filterList);
                    }
                } catch(Exception exception) {
                    // Just do nothing
                }
            } 
        }; 
        applyQueryButt.setOnAction(applyQueryEvent);
        
        // for spacing out the different sections
        Label spacer = new Label("");
        spacer.setFont(Font.font("Arial", FontWeight.NORMAL, 5));

        // add items to bottom vbox
        botContainer.getChildren().addAll(queryLabel, filterLabel, filterNameField, spacer, nutrientFilterLabel, filterNutrientField, applyQueryButt);
        // End of filter section
        
        
        // complete left portion of window
        leftPaneOuter.getChildren().addAll(topContainer, botContainer);
        
        return leftPaneOuter;
    }
    
    /**
     * A private helper method to find the set intersection of two food sets
     * 
     * @param ListA the sets to be intersected
     * @param ListB
     * @return tmp a list containing the intersect
     */
    private List<FoodItem> intersection(List<FoodItem> setA, List<FoodItem> setB) {
        List<FoodItem> tmp = new ArrayList<FoodItem>();
        for (FoodItem x : setA) // check if each element in one set is in the other
            if (setB.contains(x))
                tmp.add(x); // if in both sets, add to final set
        return tmp;
    }
    
    
    /**
     * Creates a window representing the program's interface. Displays a food list and meal list
     * and allows food items to be added to both. Also possess a menu on the left side and the 
     * ability to analyze a meal's nutritional value.
     * 
     * @param primaryStage - stage for the GUI
     */
    @Override
    public void start(Stage primaryStage) {
        try {
            window = primaryStage;
            window.setTitle("Food Query and Meal Analysis");
            
            foodData = new FoodData();

            foodListView = new FoodListView();
            mealListView = new FoodListView();

            // layout of GUI
            GridPane root = new GridPane();

            root.setPadding(new Insets(10, 10, 10, 10));
            root.setHgap(10);
            root.setVgap(10);

            // menu label
            Label labelTitle = new Label("Menu");
            labelTitle.setFont(Font.font("Arial", FontWeight.BOLD, 20));
            
            // food list labels and button
            Label foodListTitle = new Label("Food List");
            foodListTitle.setFont(Font.font("Arial", FontWeight.BOLD, 20));
            
            counterLabel = new Label("Number of Items: " + counter);
            
            // for adding a food item in the food list to the meal list
            Button addToMealButt = new Button("Add Selected To Meal");
            
            // when addToMealButt is clicked           
            EventHandler<ActionEvent> addToMealEvent = new EventHandler<ActionEvent>() { 
                public void handle(ActionEvent e) 
                { 
                    foodListView.addCheckedItemsToMeal(mealListView);
                } 
            }; 
            addToMealButt.setOnAction(addToMealEvent);
                        
            // meal list labels and buttons
            Label mealListTitle = new Label("Meal List");
            mealListTitle.setFont(Font.font("Arial", FontWeight.BOLD, 20));

            // for analyzing a meal's nutritional values
            Button analyzeMealButt = new Button("Analyze Meal");
            
            // when analyzeMealButt is clicked
            EventHandler<ActionEvent>analyzeMealEvent = new EventHandler<ActionEvent>() { 
                public void handle(ActionEvent e) 
                { 
                    @SuppressWarnings("unused")
                    // generates a window displaying the meal's values
                    AnalyzeMealPopUp analyzeMeal = new AnalyzeMealPopUp(window, mealListView.analyzeList());
                } 
            }; 
            analyzeMealButt.setOnAction(analyzeMealEvent);
            
            // for removing selected food items from the meal
            Button removeFromMealButt = new Button("Remove Selected From Meal");

            // when removeFromMealButt is clicked
            EventHandler<ActionEvent> removeFromMealEvent = new EventHandler<ActionEvent>() { 
                public void handle(ActionEvent e) 
                { 
                    mealListView.removeCheckedItems();
                } 
            }; 
            removeFromMealButt.setOnAction(removeFromMealEvent);
            
            // menu of program
            VBox leftPaneOuter = getLeftPane();
            root.add(labelTitle, 0, 0);
            root.add(leftPaneOuter, 0, 1);

            // adding food list, its labels, and button to the center of the window
            root.add(foodListTitle, 1, 0, 1, 1);
            root.add(foodListView.getList(), 1, 1, 2, 1);
            root.add(addToMealButt, 2, 0);
            root.add(counterLabel, 1, 2, 2, 1);
            
            // adding meal list, its labels, and buttons to the right of the window
            root.add(mealListTitle, 3, 0, 1, 1);
            root.add(mealListView.getList(), 3, 1, 3, 1);
            root.add(analyzeMealButt, 4, 0, 1, 1);
            root.add(removeFromMealButt, 5, 0);

            scene = new Scene(root, 875, 500);
            window.setScene(scene);
            window.show();  
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Main method.
     * 
     * @param args - currently unused
     */
    public static void main(String[] args) {
        launch(args);
    }
}
